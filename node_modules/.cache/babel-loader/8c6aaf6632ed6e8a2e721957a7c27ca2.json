{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SID.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SID.vue","mtime":1655049120576},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/babel.config.js","mtime":1654095143863},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-unused-vars */\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport Flowchart from \"../components/SIDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  components: {\n    ConnectionDialog: ConnectionDialog,\n    NodeDialog: NodeDialog,\n    Flowchart: Flowchart\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      files: [],\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n      editableTabs: [{\n        title: 'Tab 1',\n        name: '1',\n        content: 'Tab 1 content'\n      }, {\n        title: 'Tab 2',\n        name: '2',\n        content: 'Tab 2 content'\n      }],\n      tabIndex: 2,\n      nodeForm: {\n        target: null\n      },\n      connectionForm: {\n        target: null,\n        operation: null\n      },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false\n    };\n  },\n  methods: {\n    test: function test() {\n      alert(JSON.stringify(this.$store.state.nodes));\n      alert(JSON.stringify(this.$store.state.connections));\n    },\n    handleClose: function handleClose(done) {\n      this.$confirm('Are you sure to close this dialog?').then(function (_) {\n        done();\n      }).catch(function (_) {});\n    },\n    getFile: function getFile() {\n      document.getElementById(\"upfile\").click();\n    },\n    processFile: function processFile(event) {\n      // Stop the form from reloading the page\n      event.preventDefault(); // Create a new FileReader() object\n\n      var reader = new FileReader(); // Setup the callback event to run when the file is read\n\n      reader.onload = this.logFile; // Read the file\n\n      reader.readAsText(event.target.files[0]);\n    },\n    logFile: function logFile(event) {\n      var str = event.target.result;\n      var json = JSON.parse(str);\n      console.log('string', str);\n      console.log('json', json);\n      this.$store.commit('set_all', json);\n    },\n    handleSave: function handleSave() {\n      var data = {\n        nodes: this.$store.state.nodes,\n        connections: this.$store.state.connections\n      };\n      console.log(data);\n      var jsonString = \"data:text/json;chatset=utf-8,\".concat(encodeURIComponent(JSON.stringify(data)));\n      var link = document.createElement(\"a\");\n      link.href = jsonString;\n      link.download = \"PASS-Model-\" + Date.now() + \".json\";\n      link.click();\n    },\n    handleAddSubject: function handleAddSubject() {\n      var idInit = uuidv4();\n      this.$refs.chart.add({\n        id: idInit,\n        x: 10,\n        y: 10,\n        text: \"Subjekt\" + this.$store.state.nodes.length,\n        type: \"intern\",\n        SBD: {\n          nodes: [],\n          connections: []\n        },\n        externalID: idInit,\n        multiSubject: false,\n        comment: null\n      });\n    },\n    handleDblClick: function handleDblClick(position) {\n      var idInit = uuidv4();\n      this.$refs.chart.add({\n        id: idInit,\n        x: 10,\n        y: 10,\n        text: \"Subjekt\" + this.$store.state.nodes.length,\n        type: \"intern\",\n        SBD: {\n          nodes: [],\n          connections: []\n        },\n        externalID: idInit,\n        multiSubject: false,\n        comment: null\n      });\n    },\n    handleSelect: function handleSelect(nodes) {// console.log(nodes);\n    },\n    handleSelectConnection: function handleSelectConnection(connections) {// console.log(connections);\n    },\n    handleChartSave: function () {\n      var _handleChartSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(nodes, connections) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                alert(JSON.stringify(this.$store.state.nodes));\n                alert(JSON.stringify(this.$store.state.connections));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleChartSave(_x, _x2) {\n        return _handleChartSave.apply(this, arguments);\n      }\n\n      return handleChartSave;\n    }(),\n    handleEditNode: function handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection: function handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    }\n  },\n  computed: {}\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,kCADA;IAEAC,sBAFA;IAGAC;EAHA,CADA;EAMAC;IACA;MACAC,oBADA;MAEAC,SAFA;MAGAC,eAHA;MAIAC,SAJA;MAKAC,sBALA;MAMAC;QACAC,cADA;QAEAC,SAFA;QAGAC;MAHA,GAIA;QACAF,cADA;QAEAC,SAFA;QAGAC;MAHA,CAJA,CANA;MAeAC,WAfA;MAgBAC;QAAAC;MAAA,CAhBA;MAiBAC;QAAAD;QAAAE;MAAA,CAjBA;MAkBAC,wBAlBA;MAmBAC;IAnBA;EAqBA,CA5BA;EA6BAC;IAEAC,IAFA,kBAEA;MACAC;MACAA;IAEA,CANA;IAQAC,WARA,uBAQAC,IARA,EAQA;MACA,oDACAC,IADA,CACA;QACAD;MACA,CAHA,EAIAE,KAJA,CAIA,eAJA;IAKA,CAdA;IAeAC,OAfA,qBAeA;MACAC;IACA,CAjBA;IAkBAC,WAlBA,uBAkBAC,KAlBA,EAkBA;MACA;MACAA,uBAFA,CAGA;;MACA,8BAJA,CAKA;;MACAC,6BANA,CAOA;;MACAA;IACA,CA3BA;IA4BAC,OA5BA,mBA4BAF,KA5BA,EA4BA;MACA;MACA;MACAG;MACAA;MACA;IACA,CAlCA;IAmCAC,UAnCA,wBAmCA;MACA;QAAA3B;QAAAD;MAAA;MACA2B;MACA,2EACAE,oBADA;MAGA;MACAC;MACAA;MAEAA;IACA,CA9CA;IAkDAC,gBAlDA,8BAkDA;MACA;MACA;QACAC,UADA;QAEAC,KAFA;QAGAC,KAHA;QAIAC,gDAJA;QAKAC,cALA;QAMAC;UAAApC;UAAAD;QAAA,CANA;QAOAsC,kBAPA;QAQAC,mBARA;QASAC;MATA;IAWA,CA/DA;IAgEAC,cAhEA,0BAgEAC,QAhEA,EAgEA;MACA;MACA;QACAV,UADA;QAEAC,KAFA;QAGAC,KAHA;QAIAC,gDAJA;QAKAC,cALA;QAMAC;UAAApC;UAAAD;QAAA,CANA;QAOAsC,kBAPA;QAQAC,mBARA;QASAC;MATA;IAWA,CA7EA;IA8EAG,YA9EA,wBA8EA1C,KA9EA,EA8EA,CACA;IACA,CAhFA;IAiFA2C,sBAjFA,kCAiFA5C,WAjFA,EAiFA,CACA;IACA,CAnFA;IAoFA6C,eApFA;MAAA,gGAoFA5C,KApFA,EAoFAD,WApFA;QAAA;UAAA;YAAA;cAAA;gBAqFAgB;gBACAA;;cAtFA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAwFA8B,cAxFA,0BAwFAC,IAxFA,EAwFA;MACA;MACA;IACA,CA3FA;IA4FAC,oBA5FA,gCA4FAC,UA5FA,EA4FA;MACA;MACA;IACA;EA/FA,CA7BA;EA8HAC;AA9HA","names":["components","ConnectionDialog","NodeDialog","Flowchart","data","dialogVisible","files","connections","nodes","editableTabsValue","editableTabs","title","name","content","tabIndex","nodeForm","target","connectionForm","operation","nodeDialogVisible","connectionDialogVisible","methods","test","alert","handleClose","done","then","catch","getFile","document","processFile","event","reader","logFile","console","handleSave","JSON","link","handleAddSubject","id","x","y","text","type","SBD","externalID","multiSubject","comment","handleDblClick","position","handleSelect","handleSelectConnection","handleChartSave","handleEditNode","node","handleEditConnection","connection","computed"],"sourceRoot":"src/views","sources":["SID.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"toolbar\">\n      <el-button\n      size=\"mini\"\n        @click=\"handleAddSubject\"\n      >\n        Füge Subjekt hinzu\n      </el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.remove()\">Lösche Subjekt/ Nachrichten</el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.editCurrent()\">\n        Bearbeite Subjekt/ Nachrichten\n      </el-button>\n      <el-button size=\"mini\" @click=\"test()\">\nTest</el-button>\n\n  <el-popconfirm\n  confirm-button-text='OK'\n  cancel-button-text='Abbrechen'\n  icon=\"el-icon-info\"\n  icon-color=\"red\"\n  title=\"Ein Import überschreibt das aktuell gespeicherte Modell. Wollen Sie trotzdem fortfahren?\"\n  @confirm=\"getFile()\"\n>\n<el-button slot=\"reference\" class=\"import\" size=\"mini\">Import</el-button>\n</el-popconfirm>\n      \n  <div style='height: 0px;width: 0px; overflow:hidden;'><input id=\"upfile\" type=\"file\" accept=\".json\" @change=\"processFile($event)\" /></div>\n    <el-button class=\"export\" size=\"mini\" @click=\"handleSave()\">Export</el-button>\n    </div>\n    <flowchart\n      :nodes=\"nodes\"\n      :connections=\"connections\"\n      @editnode=\"handleEditNode\"\n      :width=\"200000\"\n      :height=\"1000\"\n      :readonly=\"false\"\n      @dblclick=\"handleDblClick\"\n      @editconnection=\"handleEditConnection\"\n      @save=\"handleChartSave\"\n      @select=\"handleSelect\"\n      @selectconnection=\"handleSelectConnection\"\n      ref=\"chart\"\n    >\n    </flowchart>\n    <node-dialog\n      :visible.sync=\"nodeDialogVisible\"\n      :node.sync=\"nodeForm.target\"\n    ></node-dialog>\n    <connection-dialog\n      :visible.sync=\"connectionDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n    >\n    </connection-dialog>\n  </div>\n</template>\n<script>\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport Flowchart from \"../components/SIDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  components: {\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      dialogVisible: false,\n      files: [],\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n        editableTabs: [{\n          title: 'Tab 1',\n          name: '1',\n          content: 'Tab 1 content'\n        }, {\n          title: 'Tab 2',\n          name: '2',\n          content: 'Tab 2 content'\n        }],\n        tabIndex: 2,\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false,\n    };\n  },\n  methods: {\n\ntest(){\n  alert(JSON.stringify(this.$store.state.nodes))\n    alert(JSON.stringify(this.$store.state.connections))\n\n},\n\n handleClose(done) {\n        this.$confirm('Are you sure to close this dialog?')\n          .then(_ => {\n            done();\n          })\n          .catch(_ => {});\n      },\ngetFile() {\n  document.getElementById(\"upfile\").click();\n},\nprocessFile(event) {\n\t// Stop the form from reloading the page\n\tevent.preventDefault();\n\t// Create a new FileReader() object\n\tlet reader = new FileReader();\n\t// Setup the callback event to run when the file is read\n\treader.onload = this.logFile;\n\t// Read the file\n\treader.readAsText(event.target.files[0])\n},\nlogFile (event) {\n\tlet str = event.target.result;\n\tlet json = JSON.parse(str);\n\tconsole.log('string', str);\n\tconsole.log('json', json);\n  this.$store.commit('set_all', json)\n},\nhandleSave(){\n  const data = {nodes : this.$store.state.nodes, connections : this.$store.state.connections}\n    console.log(data)\n    const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const link = document.createElement(\"a\");\n    link.href = jsonString;\n    link.download = \"PASS-Model-\" + Date.now()  + \".json\";\n\n    link.click();\n},\n\n\n\n    handleAddSubject(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Subjekt\" + this.$store.state.nodes.length,\n          type: \"intern\",\n          SBD: {nodes: [], connections : []},\n          externalID: idInit,\n          multiSubject: false,\n          comment: null,\n        })\n    },\n handleDblClick(position) {\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Subjekt\" + this.$store.state.nodes.length,\n          type: \"intern\",\n          SBD: {nodes: [], connections : []},\n          externalID: idInit,\n          multiSubject: false,\n          comment: null,\n        })\n    },\n    handleSelect(nodes) {\n      // console.log(nodes);\n    },\n    handleSelectConnection(connections) {\n      // console.log(connections);\n    },\n    async handleChartSave(nodes, connections) {\n      alert(JSON.stringify(this.$store.state.nodes))\n      alert(JSON.stringify(this.$store.state.connections))\n    },\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n  },\n    computed: {}, \n};\n</script>\n\n<style scoped>\n\n\n\n\n.import {\nposition: fixed;\n  top: 6%;\n  left: 94%;\n}\n\n.export {\nposition: fixed;\n  top: 6%;\n  left: 90%;\n}\n\n\n.toolbar {\nmargin-left: 12px;\nmargin-bottom: 12px;\n}\n  \n\n.title {\n  margin-bottom: 0px;\n}\n\n\n#toolbar > button {\n  margin-right: 4px;\n  margin-left: 10px;\n}\n\n\n.container {\n  width: 100%;\n}\n\n.tabs{\n  margin-left: 1px;\n\n}\n\n</style>\n"]}]}