{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/ConnectionDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/ConnectionDialog.vue","mtime":1655119356345},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/babel.config.js","mtime":1654095143863},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js","mtime":1655376985502},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    connection: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      inputVisible: false,\n      inputValue: '',\n      connectionForm: {\n        sourceId: null,\n        sourcePosition: null,\n        destinationId: null,\n        destinationPosition: null,\n        text: null,\n        messages: []\n      }\n    };\n  },\n  methods: {\n    handleClose: function handleClose(tag) {\n      this.connectionForm.messages.splice(this.connectionForm.messages.indexOf(tag), 1);\n    },\n    showInput: function showInput() {\n      var _this = this;\n\n      this.inputVisible = true;\n      this.$nextTick(function (_) {\n        _this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleInputConfirm: function handleInputConfirm() {\n      var inputValue = this.inputValue;\n\n      if (inputValue) {\n        this.connectionForm.messages.push(inputValue);\n      }\n\n      this.inputVisible = false;\n      this.inputValue = '';\n    },\n    handleClickSaveConnection: function () {\n      var _handleClickSaveConnection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.inputValue = '', this.$emit('update:visible', false);\n                this.$emit('update:connection', Object.assign(this.connection, {\n                  text: this.connectionForm.text,\n                  messages: this.connectionForm.messages\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleClickSaveConnection() {\n        return _handleClickSaveConnection.apply(this, arguments);\n      }\n\n      return handleClickSaveConnection;\n    }(),\n    handleClickCancelSaveConnection: function () {\n      var _handleClickCancelSaveConnection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.inputValue = '', this.$emit('update:visible', false);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleClickCancelSaveConnection() {\n        return _handleClickCancelSaveConnection.apply(this, arguments);\n      }\n\n      return handleClickCancelSaveConnection;\n    }()\n  },\n  watch: {\n    connection: {\n      immediate: true,\n      handler: function handler(val) {\n        if (!val) {\n          return;\n        }\n\n        this.connectionForm.id = val.id;\n        this.connectionForm.messages = val.messages;\n      }\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;EACAA;IACAC;MACAC,aADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA;EALA,CADA;EAWAE,IAXA,kBAWA;IACA;MACAC,mBADA;MAEAC,cAFA;MAGAC;QACAC,cADA;QAEAC,oBAFA;QAGAC,mBAHA;QAIAC,yBAJA;QAKAC,UALA;QAMAC;MANA;IAHA;EAYA,CAxBA;EAyBAC;IACAC,WADA,uBACAC,GADA,EACA;MACA;IACA,CAHA;IAKAC,SALA,uBAKA;MAAA;;MACA;MACA;QACA;MACA,CAFA;IAGA,CAVA;IAWAC,kBAXA,gCAWA;MACA;;MACA;QACA;MACA;;MACA;MACA;IACA,CAlBA;IAmBAC,yBAnBA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAoBA,sBACA,mCADA;gBAEA;kBACAP,8BADA;kBAEAC;gBAFA;;cAtBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA2BAO,+BA3BA;MAAA;QAAA;UAAA;YAAA;cAAA;gBA4BA,sBACA,mCADA;;cA5BA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA,CAzBA;EAyDAC;IACAlB;MACAmB,eADA;MAEAC,OAFA,mBAEAC,GAFA,EAEA;QACA;UAAA;QAAA;;QACA;QACA;MACA;IANA;EADA;AAzDA","names":["props","visible","type","default","connection","data","inputVisible","inputValue","connectionForm","sourceId","sourcePosition","destinationId","destinationPosition","text","messages","methods","handleClose","tag","showInput","handleInputConfirm","handleClickSaveConnection","handleClickCancelSaveConnection","watch","immediate","handler","val"],"sourceRoot":"src/components/Dialog","sources":["ConnectionDialog.vue"],"sourcesContent":["<template>\n    <div>\n      <md-dialog :md-click-outside-to-close=\"false\" :md-active.sync=\"visible\">\n      <md-dialog-title>Nachrichten</md-dialog-title>\n\n<el-tag\n  :key=\"tag\"\n  v-for=\"tag in connectionForm.messages\"\n  closable\n  class=\"SBD-select\"\n  :disable-transitions=\"false\"\n  @close=\"handleClose(tag)\">\n  {{tag}}\n</el-tag>\n<el-input\n  class=\"input-new-tag\"\n  v-if=\"inputVisible\"\n  v-model=\"inputValue\"\n  ref=\"saveTagInput\"\n  size=\"mini\"\n  @keyup.enter.native=\"handleInputConfirm\"\n  @blur=\"handleInputConfirm\"\n>\n</el-input>\n<el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput\">+ Neue Nachricht</el-button>\n          <div class=\"md-layout md-alignment-top-center\">\n    <div class=\"md-layout-item \">\n        <md-button @click=\"handleClickSaveConnection\">Schlie√üen</md-button>\n    </div>\n  </div>\n  \n      </md-dialog>\n    </div>\n</template>\n<script>\n\n  export default {\n    props: {\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      connection: {\n        type: Object,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        inputVisible: false,\n        inputValue: '',\n        connectionForm: {\n          sourceId: null,\n          sourcePosition: null,\n          destinationId: null,\n          destinationPosition: null,\n          text: null,\n          messages: [],\n        },\n      };\n    },\n    methods: {\n handleClose(tag) {\n        this.connectionForm.messages.splice(this.connectionForm.messages.indexOf(tag), 1);\n      },\n\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.connectionForm.messages.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      },\n      async handleClickSaveConnection() {\n        this.inputValue = '',\n        this.$emit('update:visible', false);\n        this.$emit('update:connection', Object.assign(this.connection, {\n          text: this.connectionForm.text,\n          messages: this.connectionForm.messages\n        }));\n      },\n      async handleClickCancelSaveConnection() {\n        this.inputValue = '',\n        this.$emit('update:visible', false);\n      },\n    },\n    watch: {\n      connection: {\n        immediate: true,\n        handler(val) {\n          if (!val) { return; }\n          this.connectionForm.id = val.id;\n           this.connectionForm.messages = val.messages;\n        },\n      },\n    },\n  };\n</script>\n<style>\n\n  .el-tag {\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-top: 5px;\n  }\n\n\n  .button-new-tag {\n    margin-left: 10px;\n    margin-right: 10px;\n    height: 32px;\n    line-height: 30px;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-top: 5px;\n  }\n  .input-new-tag {\n    width: 100px;\n    margin-top: 5px;\n    margin-left: 10px;\n    margin-right: 10px;\n    vertical-align: bottom;\n\n  }\n\n\n\n</style>"]}]}