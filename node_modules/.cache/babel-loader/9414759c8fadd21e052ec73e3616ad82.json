{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SBD.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SBD.vue","mtime":1655339739126},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/babel.config.js","mtime":1654095143863},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-unused-vars */\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport ActionDialog from \"../components/Dialog/ActionDialog\";\nimport SendDialog from \"../components/Dialog/SendDialog\";\nimport ReceiveDialog from \"../components/Dialog/ReceiveDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport SBDNodeDialog from \"../components/Dialog/SBDNodeDialog\";\nimport Flowchart from \"../components/SBDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  components: {\n    SBDNodeDialog: SBDNodeDialog,\n    ActionDialog: ActionDialog,\n    SendDialog: SendDialog,\n    ReceiveDialog: ReceiveDialog,\n    ConnectionDialog: ConnectionDialog,\n    NodeDialog: NodeDialog,\n    Flowchart: Flowchart\n  },\n  data: function data() {\n    return {\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n      tabIndex: 2,\n      nodeForm: {\n        target: null\n      },\n      connectionForm: {\n        target: null,\n        operation: null\n      },\n      nodeDialogVisible: false,\n      actionDialogVisible: false,\n      sendDialogVisible: false,\n      receiveDialogVisible: false\n    };\n  },\n  methods: {\n    handleAddAction: function handleAddAction() {\n      var _this = this;\n\n      var idInit = uuidv4();\n      this.$refs.chart.add({\n        id: idInit,\n        x: 10,\n        y: 10,\n        text: \"DoState\" + this.$store.state.nodes.find(function (element) {\n          return element.id === _this.$route.params.id;\n        }).SBD.nodes.filter(function (element) {\n          return element.type === \"action\";\n        }).length,\n        type: \"action\",\n        externalID: idInit,\n        comment: null,\n        state: null\n      });\n    },\n    handleAddReceive: function handleAddReceive() {\n      var _this2 = this;\n\n      var idInit = uuidv4();\n      this.$refs.chart.add({\n        id: idInit,\n        x: 10,\n        y: 10,\n        text: \"Receive\" + this.$store.state.nodes.find(function (element) {\n          return element.id === _this2.$route.params.id;\n        }).SBD.nodes.filter(function (element) {\n          return element.type === \"receive\";\n        }).length,\n        type: \"receive\",\n        externalID: idInit,\n        comment: null,\n        state: null\n      });\n    },\n    handleAddSend: function handleAddSend() {\n      var _this3 = this;\n\n      var idInit = uuidv4();\n      this.$refs.chart.add({\n        id: idInit,\n        x: 10,\n        y: 10,\n        text: \"Send\" + this.$store.state.nodes.find(function (element) {\n          return element.id === _this3.$route.params.id;\n        }).SBD.nodes.filter(function (element) {\n          return element.type === \"send\";\n        }).length,\n        type: \"send\",\n        externalID: idInit,\n        comment: null,\n        state: null\n      });\n    },\n    handleDblClick: function handleDblClick(position) {},\n    handleSelect: function handleSelect(nodes) {// console.log(nodes);\n    },\n    handleSelectConnection: function handleSelectConnection(connections) {// console.log(connections);\n    },\n    handleChartSave: function () {\n      var _handleChartSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(nodes, connections) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function handleChartSave(_x, _x2) {\n        return _handleChartSave.apply(this, arguments);\n      }\n\n      return handleChartSave;\n    }(),\n    handleEditNode: function handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection: function handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n\n      if (connection.source.type === \"action\") {\n        this.actionDialogVisible = true;\n      } else if (connection.source.type === \"send\") {\n        this.sendDialogVisible = true;\n      } else if (connection.source.type === \"receive\") {\n        this.receiveDialogVisible = true;\n      }\n    }\n  },\n  computed: {}\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,4BADA;IAEAC,0BAFA;IAGAC,sBAHA;IAIAC,4BAJA;IAKAC,kCALA;IAMAC,sBANA;IAOAC;EAPA,CADA;EAUAC;IACA;MACAC,eADA;MAEAC,SAFA;MAGAC,sBAHA;MAIAC,WAJA;MAKAC;QAAAC;MAAA,CALA;MAMAC;QAAAD;QAAAE;MAAA,CANA;MAOAC,wBAPA;MAQAC,0BARA;MASAC,wBATA;MAUAC;IAVA;EAYA,CAvBA;EAwBAC;IACAC,eADA,6BACA;MAAA;;MACA;MACA;QACAC,UADA;QAEAC,KAFA;QAGAC,KAHA;QAIAC;UAAA;QAAA;UAAA;QAAA,SAJA;QAKAC,cALA;QAMAC,kBANA;QAOAC,aAPA;QAQAC;MARA;IAUA,CAbA;IAeAC,gBAfA,8BAeA;MAAA;;MACA;MACA;QACAR,UADA;QAEAC,KAFA;QAGAC,KAHA;QAIAC;UAAA;QAAA;UAAA;QAAA,SAJA;QAKAC,eALA;QAMAC,kBANA;QAOAC,aAPA;QAQAC;MARA;IAUA,CA3BA;IA6BAE,aA7BA,2BA6BA;MAAA;;MACA;MACA;QACAT,UADA;QAEAC,KAFA;QAGAC,KAHA;QAIAC;UAAA;QAAA;UAAA;QAAA,SAJA;QAKAC,YALA;QAMAC,kBANA;QAOAC,aAPA;QAQAC;MARA;IAUA,CAzCA;IA0CAG,cA1CA,0BA0CAC,QA1CA,EA0CA,CACA,CA3CA;IA4CAC,YA5CA,wBA4CAzB,KA5CA,EA4CA,CACA;IACA,CA9CA;IA+CA0B,sBA/CA,kCA+CA3B,WA/CA,EA+CA,CACA;IACA,CAjDA;IAkDA4B,eAlDA;MAAA,gGAkDA3B,KAlDA,EAkDAD,WAlDA;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAmDA6B,cAnDA,0BAmDAC,IAnDA,EAmDA;MACA;MACA;IACA,CAtDA;IAuDAC,oBAvDA,gCAuDAC,UAvDA,EAuDA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA;EAhEA,CAxBA;EA0FAC;AA1FA","names":["components","SBDNodeDialog","ActionDialog","SendDialog","ReceiveDialog","ConnectionDialog","NodeDialog","Flowchart","data","connections","nodes","editableTabsValue","tabIndex","nodeForm","target","connectionForm","operation","nodeDialogVisible","actionDialogVisible","sendDialogVisible","receiveDialogVisible","methods","handleAddAction","id","x","y","text","type","externalID","comment","state","handleAddReceive","handleAddSend","handleDblClick","position","handleSelect","handleSelectConnection","handleChartSave","handleEditNode","node","handleEditConnection","connection","computed"],"sourceRoot":"src/views","sources":["SBD.vue"],"sourcesContent":["    handleAddAction(){\n\n<template>\n  <div class=\"container\">\n    <div id=\"toolbar\">\n  <el-button-group >\n    <el-button size=\"mini\" @click=\"handleAddAction\">Do-State</el-button>\n    <el-button size=\"mini\" @click=\"handleAddReceive\">\n      Receive-State\n    </el-button>\n        <el-button size=\"mini\" @click=\"handleAddSend\">\n      Send-State\n    </el-button>\n  </el-button-group>\n      <el-button size=\"mini\" @click=\"$refs.chart.remove()\">LÃ¶schen</el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.editCurrent()\">\n        Bearbeiten\n      </el-button>\n    </div>\n    <flowchart\n      :idSBD=\"$route.params.id\"\n      :nodes=\"nodes\"\n      :connections=\"connections\"\n      @editnode=\"handleEditNode\"\n      :width=\"200000\"\n      :height=\"1000\"\n      :readonly=\"false\"\n      @dblclick=\"handleDblClick\"\n      @editconnection=\"handleEditConnection\"\n      @save=\"handleChartSave\"\n      @select=\"handleSelect\"\n      @selectconnection=\"handleSelectConnection\"\n      ref=\"chart\"\n    >\n    </flowchart>\n    <SBDNodeDialog\n      :idSBD=\"$route.params.id\"\n      :visible.sync=\"nodeDialogVisible\"\n      :node.sync=\"nodeForm.target\"\n    ></SBDNodeDialog>\n    <ActionDialog\n      :visible.sync=\"actionDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </ActionDialog>\n    <SendDialog\n      :visible.sync=\"sendDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </SendDialog>\n        <ReceiveDialog\n      :visible.sync=\"receiveDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </ReceiveDialog>\n\n  </div>\n</template>\n<script>\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport ActionDialog from \"../components/Dialog/ActionDialog\";\nimport SendDialog from \"../components/Dialog/SendDialog\";\nimport ReceiveDialog from \"../components/Dialog/ReceiveDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport SBDNodeDialog from \"../components/Dialog/SBDNodeDialog\";\nimport Flowchart from \"../components/SBDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  components: {\n    SBDNodeDialog,\n    ActionDialog,\n    SendDialog,\n    ReceiveDialog,\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n        tabIndex: 2,\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      actionDialogVisible: false,\n      sendDialogVisible: false,\n      receiveDialogVisible: false,\n    };\n  },\n  methods: {\n    handleAddAction(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"DoState\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"action\").length,\n          type: \"action\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n\n    handleAddReceive(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Receive\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"receive\").length,\n          type: \"receive\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n  \n    handleAddSend(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Send\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"send\").length,\n          type: \"send\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n handleDblClick(position) {\n    },\n    handleSelect(nodes) {\n      // console.log(nodes);\n    },\n    handleSelectConnection(connections) {\n      // console.log(connections);\n    },\n    async handleChartSave(nodes, connections) {},\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      if(connection.source.type ===\"action\"){\n        this.actionDialogVisible = true;\n      } else if(connection.source.type ===\"send\"){\n        this.sendDialogVisible = true;\n      } else if(connection.source.type ===\"receive\"){\n        this.receiveDialogVisible = true;\n      }\n    },\n  },\n  computed: {}, \n};\n</script>\n\n<style scoped>\n\n\n#toolbar {\n  margin-bottom: 12px;\n}\n\n.title {\n  margin-bottom: 0px;\n}\n\n\n#toolbar > button {\n  margin-right: 4px;\n  margin-left: 10px;\n}\n\n\n.container {\n  width: 100%;\n  margin: auto;\n}\n\n.tabs{\n  margin-left: 1px;\n\n}\n\n.el-button-group{\n  margin-left: 10px;\n\n}\n\n</style>\n"]}]}