{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/ReceiveDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/ReceiveDialog.vue","mtime":1655342186111},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/babel.config.js","mtime":1654095143863},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js","mtime":1655376985502},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    idSBD: {\n      type: String\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    connection: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      inputVisible: false,\n      inputValue: '',\n      connectionForm: {\n        sourceId: null,\n        sourcePosition: null,\n        destinationId: null,\n        destinationPosition: null,\n        text: null,\n        messages: [],\n        receiveFrom: \"\",\n        receiveMsg: \"\"\n      }\n    };\n  },\n  computed: {\n    optionsReceiveFrom: function optionsReceiveFrom() {\n      var _this = this;\n\n      var that = this;\n      var receiveFrom = this.$store.state.connections.filter(function (element) {\n        return element.destination.id === _this.idSBD;\n      }).map(function (element) {\n        return element.source.id;\n      });\n\n      var uniqueReceiveFrom = _toConsumableArray(new Set(receiveFrom));\n\n      return uniqueReceiveFrom.map(function (element) {\n        return Object.create({\n          value: element,\n          label: that.$store.state.nodes.find(function (elem) {\n            return elem.id === element;\n          }).text\n        });\n      });\n    },\n    optionsReceiveMsg: function optionsReceiveMsg() {\n      var _this2 = this;\n\n      if (!this.connectionForm.receiveFrom) {\n        return;\n      }\n\n      var receiveMsg = this.$store.state.connections.filter(function (element) {\n        return element.destination.id === _this2.idSBD && element.source.id === _this2.connectionForm.receiveFrom;\n      }).map(function (element) {\n        return element.messages;\n      }).flat(1);\n      return receiveMsg.map(function (element) {\n        return Object.create({\n          value: element,\n          label: element\n        });\n      });\n    }\n  },\n  methods: {\n    resetChangeSubject: function resetChangeSubject() {\n      if (!this.optionsReceiveMsg.includes(this.connectionForm.receiveMsg)) {\n        this.connectionForm.receiveMsg = \"\";\n      }\n    },\n    optionsFromChange: function optionsFromChange() {\n      this.connectionForm.receiveMsg = \"\";\n    },\n    handleClose: function handleClose(tag) {\n      this.connectionForm.messages.splice(this.connectionForm.messages.indexOf(tag), 1);\n    },\n    showInput: function showInput() {\n      var _this3 = this;\n\n      this.inputVisible = true;\n      this.$nextTick(function (_) {\n        _this3.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleInputConfirm: function handleInputConfirm() {\n      var inputValue = this.inputValue;\n\n      if (inputValue) {\n        this.connectionForm.messages.push(inputValue);\n      }\n\n      this.inputVisible = false;\n      this.inputValue = '';\n    },\n    handleClickSaveConnection: function () {\n      var _handleClickSaveConnection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.inputValue = '', this.$emit('update:visible', false);\n                this.$emit('update:connection', Object.assign(this.connection, {\n                  messages: [\"From: \" + this.connectionForm.receiveFrom, \"Msg: \" + this.connectionForm.receiveMsg],\n                  receiveFrom: this.connectionForm.receiveFrom,\n                  receiveMsg: this.connectionForm.receiveMsg\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleClickSaveConnection() {\n        return _handleClickSaveConnection.apply(this, arguments);\n      }\n\n      return handleClickSaveConnection;\n    }(),\n    handleClickCancelSaveConnection: function () {\n      var _handleClickCancelSaveConnection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$emit('update:visible', false);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleClickCancelSaveConnection() {\n        return _handleClickCancelSaveConnection.apply(this, arguments);\n      }\n\n      return handleClickCancelSaveConnection;\n    }()\n  },\n  watch: {\n    connection: {\n      immediate: true,\n      handler: function handler(val) {\n        console.log(val);\n\n        if (!val) {\n          return;\n        }\n\n        this.connectionForm.id = val.id;\n        this.connectionForm.messages = val.messages;\n        this.connectionForm.receiveFrom = val.receiveFrom;\n        this.connectionForm.receiveMsg = val.receiveMsg;\n      }\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;EACAA;IACAC;MACAC;IADA,CADA;IAIAC;MACAD,aADA;MAEAE;IAFA,CAJA;IAQAC;MACAH,YADA;MAEAE;IAFA;EARA,CADA;EAcAE,IAdA,kBAcA;IACA;MACAC,mBADA;MAEAC,cAFA;MAGAC;QACAC,cADA;QAEAC,oBAFA;QAGAC,mBAHA;QAIAC,yBAJA;QAKAC,UALA;QAMAC,YANA;QAOAC,eAPA;QAQAC;MARA;IAHA;EAcA,CA7BA;EA8BAC;IACAC,kBADA,gCACA;MAAA;;MACA;MACA;QAAA;MAAA;QAAA;MAAA;;MACA;;MACA;QAAA;UAAAC;UAAAC;YAAA;UAAA;QAAA;MAAA;IACA,CANA;IAOAC,iBAPA,+BAOA;MAAA;;MACA;QAAA;MAAA;;MACA;QAAA;MAAA;QAAA;MAAA;MACA;QAAA;UAAAF;UAAAC;QAAA;MAAA;IACA;EAXA,CA9BA;EA2CAE;IACAC,kBADA,gCACA;MACA;QACA;MACA;IACA,CALA;IAOAC,iBAPA,+BAOA;MACA;IACA,CATA;IAUAC,WAVA,uBAUAC,GAVA,EAUA;MACA;IACA,CAZA;IAaAC,SAbA,uBAaA;MAAA;;MACA;MACA;QACA;MACA,CAFA;IAGA,CAlBA;IAmBAC,kBAnBA,gCAmBA;MACA;;MACA;QACA;MACA;;MACA;MACA;IACA,CA1BA;IA2BAC,yBA3BA;MAAA;QAAA;UAAA;YAAA;cAAA;gBA4BA,sBACA,mCADA;gBAEA;kBACAf,gGADA;kBAEAC,4CAFA;kBAGAC;gBAHA;;cA9BA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAuCAc,+BAvCA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAwCA;;cAxCA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA,CA3CA;EAsFAC;IACA3B;MACA4B,eADA;MAEAC,OAFA,mBAEAC,GAFA,EAEA;QACAC;;QACA;UAAA;QAAA;;QACA;QACA;QACA;QACA;MACA;IATA;EADA;AAtFA","names":["props","idSBD","type","visible","default","connection","data","inputVisible","inputValue","connectionForm","sourceId","sourcePosition","destinationId","destinationPosition","text","messages","receiveFrom","receiveMsg","computed","optionsReceiveFrom","value","label","optionsReceiveMsg","methods","resetChangeSubject","optionsFromChange","handleClose","tag","showInput","handleInputConfirm","handleClickSaveConnection","handleClickCancelSaveConnection","watch","immediate","handler","val","console"],"sourceRoot":"src/components/Dialog","sources":["ReceiveDialog.vue"],"sourcesContent":["               conn[\"receiveFrom\"] = \"\"\n                conn[\"receiveMsg\"] = \"\"\n\n<template>\n    <div>\n      <md-dialog :md-click-outside-to-close=\"false\" :md-active.sync=\"visible\">\n      <md-dialog-title>Empfangene Nachricht</md-dialog-title>\n      <label class=\"text-label\">From</label>\n    <el-select @change=\"resetChangeSubject\" class=\"SBD-select\" v-model=\"connectionForm.receiveFrom\" no-data-text=\"Keine Subjekte vorhanden\"  placeholder=\"Select\" size=\"large\">\n    <el-option\n      v-for=\"item in optionsReceiveFrom\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n    />\n  </el-select>\n   <label class=\"text-label\">Message</label>\n    <el-select class=\"SBD-select\" :disabled=\"connectionForm.receiveFrom === ''\" v-model=\"connectionForm.receiveMsg\"  placeholder=\"Select\" no-data-text=\"Keine Nachrichten vorhanden\" size=\"large\">\n    <el-option\n      v-for=\"item in optionsReceiveMsg\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n    />\n  </el-select>\n          <div class=\"md-layout md-alignment-center\">\n    <div class=\"md-layout-item \">\n                <md-button @click=\"handleClickCancelSaveConnection\">Abbrechen</md-button>\n</div>\n<div class=\"md-layout-item \">\n<md-button @click=\"handleClickSaveConnection\">Speichern</md-button>\n</div>\n  </div>\n  \n      </md-dialog>\n    </div>\n</template>\n<script>\n\n  export default {\n    props: {\n      idSBD: {\n      type: String,\n      },\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      connection: {\n        type: Object,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        inputVisible: false,\n        inputValue: '',\n        connectionForm: {\n          sourceId: null,\n          sourcePosition: null,\n          destinationId: null,\n          destinationPosition: null,\n          text: null,\n          messages: [],\n          receiveFrom: \"\",\n          receiveMsg: \"\",\n        },\n      };\n    },\n    computed: {\n      optionsReceiveFrom(){\n        var that = this \n      var receiveFrom = this.$store.state.connections.filter(element => element.destination.id === this.idSBD).map(element => element.source.id)\n      let uniqueReceiveFrom = [...new Set(receiveFrom)]\n      return uniqueReceiveFrom.map(element => Object.create({value: element, label: that.$store.state.nodes.find(elem => elem.id === element).text}))\n      },\n      optionsReceiveMsg(){\n      if(!this.connectionForm.receiveFrom){return}\n      var receiveMsg = this.$store.state.connections.filter(element => element.destination.id === this.idSBD && element.source.id === this.connectionForm.receiveFrom).map(element => element.messages).flat(1)\n      return receiveMsg.map(element => Object.create({value: element, label: element}))\n      }\n    },\n          methods: {\n            resetChangeSubject() {\n              if(!(this.optionsReceiveMsg.includes(this.connectionForm.receiveMsg))){\nthis.connectionForm.receiveMsg=\"\"\n              }\n            }, \n\n        optionsFromChange(){\n        this.connectionForm.receiveMsg  = \"\"\n      },\n handleClose(tag) {\n        this.connectionForm.messages.splice(this.connectionForm.messages.indexOf(tag), 1);\n      },\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.connectionForm.messages.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      },\n      async handleClickSaveConnection() {\n        this.inputValue = '',\n        this.$emit('update:visible', false);\n        this.$emit('update:connection', Object.assign(this.connection, {\n          messages: [\"From: \" + this.connectionForm.receiveFrom, \"Msg: \" + this.connectionForm.receiveMsg],\n          receiveFrom: this.connectionForm.receiveFrom,\n          receiveMsg: this.connectionForm.receiveMsg\n        }));\n      },\n\n\n\n      async handleClickCancelSaveConnection() {\n        this.$emit('update:visible', false);\n      },\n    },\n    watch: {\n      connection: {\n        immediate: true,\n        handler(val) {\n          console.log(val)\n          if (!val) { return; }\n          this.connectionForm.id = val.id;\n          this.connectionForm.messages = val.messages;\n          this.connectionForm.receiveFrom = val.receiveFrom;\n          this.connectionForm.receiveMsg = val.receiveMsg;\n        },\n      },\n    }\n  };\n</script>\n<style>\n.text-label {\n  margin-left: 15px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n\n.SBD-select {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n\n\n</style>"]}]}