{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/SBDNodeDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/SBDNodeDialog.vue","mtime":1655376700674},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/babel.config.js","mtime":1654095143863},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js","mtime":1655376985502},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    idSBD: {\n      type: String\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    node: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      options: [{\n        value: \"intern\",\n        label: \"Intern\"\n      }, {\n        value: \"extern\",\n        label: \"Extern\"\n      }],\n      nodeForm: {\n        name: null,\n        id: null,\n        type: null,\n        externalID: null,\n        comment: null,\n        state: null\n      }\n    };\n  },\n  computed: {\n    optionsState: function optionsState() {\n      var _this = this;\n\n      var stateInitOptions = [\"Start\"];\n      var stateResultOptions = [];\n      var stateHelper = this.$store.state.nodes.find(function (element) {\n        return element.id === _this.idSBD;\n      }).SBD.nodes.filter(function (element) {\n        return element.id != _this.nodeForm.id;\n      }).map(function (element) {\n        return element.state;\n      }).flat(1);\n      stateInitOptions.forEach(function (element) {\n        if (stateHelper.includes(element)) {\n          stateResultOptions.push(Object.create({\n            value: element,\n            label: element,\n            disabled: true\n          }));\n        } else {\n          if (_this.nodeForm.type === \"send\" && element === \"End\") {\n            stateResultOptions.push(Object.create({\n              value: element,\n              label: element,\n              disabled: true\n            }));\n          } else {\n            stateResultOptions.push(Object.create({\n              value: element,\n              label: element,\n              disabled: false\n            }));\n          }\n        }\n      });\n\n      if (this.nodeForm.type === \"send\") {\n        stateResultOptions.push(Object.create({\n          value: \"End\",\n          label: \"End\",\n          disabled: true\n        }));\n      } else {\n        stateResultOptions.push(Object.create({\n          value: \"End\",\n          label: \"End\",\n          disabled: false\n        }));\n      }\n\n      return stateResultOptions;\n    }\n  },\n  methods: {\n    handleClickSaveNode: function handleClickSaveNode() {\n      this.$emit('update:node', Object.assign(this.node, {\n        text: this.nodeForm.name,\n        externalID: this.nodeForm.externalID,\n        comment: this.nodeForm.comment,\n        state: this.nodeForm.state\n      }));\n      this.$emit('update:visible', false);\n    },\n    handleClickCancelSaveNode: function handleClickCancelSaveNode() {\n      this.$emit('update:visible', false);\n    }\n  },\n  watch: {\n    node: {\n      immediate: true,\n      handler: function handler(val) {\n        if (!val) {\n          return;\n        }\n\n        this.nodeForm.id = val.id;\n        this.nodeForm.type = val.type;\n        this.nodeForm.name = val.text;\n        this.nodeForm.externalID = val.externalID;\n        this.nodeForm.comment = val.comment;\n        this.nodeForm.state = val.state;\n      }\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;EACAA;IACAC;MACAC;IADA,CADA;IAIAC;MACAD,aADA;MAEAE;IAFA,CAJA;IAQAC;MACAH,YADA;MAEAE;IAFA;EARA,CADA;EAcAE;IACA;MACAC;QAAAC;QAAAC;MAAA;QAAAD;QAAAC;MAAA,EADA;MAEAC;QAAAC;QAAAC;QAAAV;QAAAW;QAAAC;QAAAC;MAAA;IAFA;EAIA,CAnBA;EAoBAC;IACAC,YADA,0BACA;MAAA;;MACA;MACA;MACA;QAAA;MAAA;QAAA;MAAA;QAAA;MAAA;MACAC,4CACA;QACA;UACAC;YAAAX;YAAAC;YAAAW;UAAA;QACA,CAFA,MAEA;UACA;YACAD;cAAAX;cAAAC;cAAAW;YAAA;UACA,CAFA,MAEA;YACAD;cAAAX;cAAAC;cAAAW;YAAA;UACA;QACA;MACA,CAXA;;MAYA;QACAD;UAAAX;UAAAC;UAAAW;QAAA;MACA,CAFA,MAEA;QACAD;UAAAX;UAAAC;UAAAW;QAAA;MACA;;MACA;IACA;EAvBA,CApBA;EA6CAC;IACAC,mBADA,iCACA;MACA;QACAC,wBADA;QAEAV,oCAFA;QAGAC,8BAHA;QAIAC;MAJA;MAMA;IACA,CATA;IAUAS,yBAVA,uCAUA;MACA;IACA;EAZA,CA7CA;EA2DAC;IACApB;MACAqB,eADA;MAEAC,OAFA,mBAEAC,GAFA,EAEA;QACA;UAAA;QAAA;;QACA;QACA;QACA;QACA;QACA;QACA;MAEA;IAXA;EADA;AA3DA","names":["props","idSBD","type","visible","default","node","data","options","value","label","nodeForm","name","id","externalID","comment","state","computed","optionsState","stateInitOptions","stateResultOptions","disabled","methods","handleClickSaveNode","text","handleClickCancelSaveNode","watch","immediate","handler","val"],"sourceRoot":"src/components/Dialog","sources":["SBDNodeDialog.vue"],"sourcesContent":["<template>\n    <div>\n      <md-dialog :md-click-outside-to-close=\"false\" :md-active.sync=\"visible\">\n      <md-dialog-title>Ändere Zustand</md-dialog-title>\n    <div class=\"body\">\n  <el-row class=\"SBD-input\">\n    <el-col>\n          <label class=\"text-label\">Name</label>\n    <el-input placeholder=\"Please input\" v-model=\"nodeForm.name\"></el-input>\n    </el-col>\n  </el-row>\n    <el-row class=\"SBD-input\">\n    <el-col >\n          <label class=\"text-label\">ID</label>\n    <el-input  placeholder=\"Please input\" v-model=\"nodeForm.externalID\"></el-input>\n    </el-col>\n  </el-row>\n     <el-row>\n    <el-col >\n    <label class=\"text-label-select\">State</label>\n    </el-col>\n  </el-row>\n       <el-row class=\"SBD-input\">\n    <el-col>\n    <el-select   multiple v-model=\"nodeForm.state\"  placeholder=\"Füge State hinzu\" size=\"large\">\n    <el-option\n      v-for=\"item in optionsState\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n       :disabled=\"item.disabled\"\n    />\n  </el-select>\n    </el-col>\n  </el-row>\n       <el-row class=\"SBD-input\">\n    <el-col>\n    <label class=\"text-label\">Kommentar</label>\n  <el-input\n    v-model=\"nodeForm.comment\"\n    placeholder=\"Füge Kommentar hinzu\"\n    show-word-limit\n    type=\"textarea\"\n  />\n    </el-col>\n  </el-row>\n            </div>\n                      <div class=\"md-layout md-alignment-center\">\n<div class=\"md-layout-item \">\n                <md-button @click=\"handleClickCancelSaveNode\">Abbrechen</md-button>\n</div>\n<div class=\"md-layout-item \">\n                <md-button @click=\"handleClickSaveNode\">Speichern</md-button>\n</div>\n</div>\n    </md-dialog>\n        </div>\n</template>\n<script>\n\n  export default {\n    props: {\n      idSBD: {\n      type: String,\n      },\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      node: {\n        type: Object,\n        default: null,\n      },\n    },\n    data: function() {\n      return {\n        options: [{value: \"intern\", label: \"Intern\"}, {value: \"extern\", label: \"Extern\"}],\n        nodeForm: {name: null, id: null, type: null, externalID: null, comment: null, state: null},\n      };\n    },\n      computed: {\n        optionsState(){\n          var stateInitOptions = [\"Start\"]\n          var stateResultOptions = []\n      var stateHelper = this.$store.state.nodes.find(element => element.id === this.idSBD).SBD.nodes.filter(element => element.id != this.nodeForm.id).map(element => element.state).flat(1)\n      stateInitOptions.forEach(element => \n      {\n        if (stateHelper.includes(element)){\n          stateResultOptions.push(Object.create({value: element, label: element, disabled: true}))\n        } else {\n          if(this.nodeForm.type === \"send\" && element === \"End\"){\n            stateResultOptions.push(Object.create({value: element, label: element, disabled: true}))\n          } else {\n            stateResultOptions.push(Object.create({value: element, label: element, disabled: false}))\n          }\n        }\n      })\n      if(this.nodeForm.type === \"send\"){\n        stateResultOptions.push(Object.create({value: \"End\", label: \"End\", disabled: true}))\n      } else {\n                stateResultOptions.push(Object.create({value: \"End\", label: \"End\", disabled: false}))\n      }\n      return stateResultOptions\n      },\n      },\n    methods: {\n      handleClickSaveNode() {\n        this.$emit('update:node', Object.assign(this.node, {\n          text: this.nodeForm.name,\n          externalID: this.nodeForm.externalID,\n          comment: this.nodeForm.comment,\n          state: this.nodeForm.state\n        }));\n        this.$emit('update:visible', false);\n      },\n      handleClickCancelSaveNode() {\n        this.$emit('update:visible', false);\n      },\n    },\n    watch: {\n      node: {\n        immediate: true,\n        handler(val) {\n          if (!val) { return; }\n          this.nodeForm.id = val.id;\n          this.nodeForm.type = val.type;\n          this.nodeForm.name = val.text;\n          this.nodeForm.externalID = val.externalID;\n          this.nodeForm.comment = val.comment;\n          this.nodeForm.state = val.state;\n\n        },\n      },\n    },\n  };\n</script>\n<style scoped>\n\n.text-label {\n  margin-left: 15px;\n  margin-right: 10px;\n}\n.text-label-select{\n  margin-left: 30px;\n  margin-right: 10px;\n}\n.SBD-input {\n  padding-left: 15px;\n  padding-right: 10px;\n}\n.text-label-switch {\n  margin-left: 15px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n</style>"]}]}