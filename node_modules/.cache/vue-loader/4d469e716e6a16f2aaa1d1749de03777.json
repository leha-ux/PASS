{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SBD.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SBD.vue","mtime":1655339739126},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/thread-loader/dist/cjs.js","mtime":1655376985502},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/babel-loader/lib/index.js","mtime":1655376985883},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport ActionDialog from \"../components/Dialog/ActionDialog\";\nimport SendDialog from \"../components/Dialog/SendDialog\";\nimport ReceiveDialog from \"../components/Dialog/ReceiveDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport SBDNodeDialog from \"../components/Dialog/SBDNodeDialog\";\nimport Flowchart from \"../components/SBDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  components: {\n    SBDNodeDialog,\n    ActionDialog,\n    SendDialog,\n    ReceiveDialog,\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n        tabIndex: 2,\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      actionDialogVisible: false,\n      sendDialogVisible: false,\n      receiveDialogVisible: false,\n    };\n  },\n  methods: {\n    handleAddAction(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"DoState\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"action\").length,\n          type: \"action\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n\n    handleAddReceive(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Receive\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"receive\").length,\n          type: \"receive\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n  \n    handleAddSend(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Send\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"send\").length,\n          type: \"send\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n handleDblClick(position) {\n    },\n    handleSelect(nodes) {\n      // console.log(nodes);\n    },\n    handleSelectConnection(connections) {\n      // console.log(connections);\n    },\n    async handleChartSave(nodes, connections) {},\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      if(connection.source.type ===\"action\"){\n        this.actionDialogVisible = true;\n      } else if(connection.source.type ===\"send\"){\n        this.sendDialogVisible = true;\n      } else if(connection.source.type ===\"receive\"){\n        this.receiveDialogVisible = true;\n      }\n    },\n  },\n  computed: {}, \n};\n",{"version":3,"sources":["SBD.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"SBD.vue","sourceRoot":"src/views","sourcesContent":["    handleAddAction(){\n\n<template>\n  <div class=\"container\">\n    <div id=\"toolbar\">\n  <el-button-group >\n    <el-button size=\"mini\" @click=\"handleAddAction\">Do-State</el-button>\n    <el-button size=\"mini\" @click=\"handleAddReceive\">\n      Receive-State\n    </el-button>\n        <el-button size=\"mini\" @click=\"handleAddSend\">\n      Send-State\n    </el-button>\n  </el-button-group>\n      <el-button size=\"mini\" @click=\"$refs.chart.remove()\">LÃ¶schen</el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.editCurrent()\">\n        Bearbeiten\n      </el-button>\n    </div>\n    <flowchart\n      :idSBD=\"$route.params.id\"\n      :nodes=\"nodes\"\n      :connections=\"connections\"\n      @editnode=\"handleEditNode\"\n      :width=\"200000\"\n      :height=\"1000\"\n      :readonly=\"false\"\n      @dblclick=\"handleDblClick\"\n      @editconnection=\"handleEditConnection\"\n      @save=\"handleChartSave\"\n      @select=\"handleSelect\"\n      @selectconnection=\"handleSelectConnection\"\n      ref=\"chart\"\n    >\n    </flowchart>\n    <SBDNodeDialog\n      :idSBD=\"$route.params.id\"\n      :visible.sync=\"nodeDialogVisible\"\n      :node.sync=\"nodeForm.target\"\n    ></SBDNodeDialog>\n    <ActionDialog\n      :visible.sync=\"actionDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </ActionDialog>\n    <SendDialog\n      :visible.sync=\"sendDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </SendDialog>\n        <ReceiveDialog\n      :visible.sync=\"receiveDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n      :idSBD=\"$route.params.id\"\n    >\n    </ReceiveDialog>\n\n  </div>\n</template>\n<script>\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport ActionDialog from \"../components/Dialog/ActionDialog\";\nimport SendDialog from \"../components/Dialog/SendDialog\";\nimport ReceiveDialog from \"../components/Dialog/ReceiveDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport SBDNodeDialog from \"../components/Dialog/SBDNodeDialog\";\nimport Flowchart from \"../components/SBDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  components: {\n    SBDNodeDialog,\n    ActionDialog,\n    SendDialog,\n    ReceiveDialog,\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n        tabIndex: 2,\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      actionDialogVisible: false,\n      sendDialogVisible: false,\n      receiveDialogVisible: false,\n    };\n  },\n  methods: {\n    handleAddAction(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"DoState\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"action\").length,\n          type: \"action\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n\n    handleAddReceive(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Receive\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"receive\").length,\n          type: \"receive\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n  \n    handleAddSend(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Send\" + this.$store.state.nodes.find(element => element.id === this.$route.params.id).SBD.nodes.filter(element => element.type === \"send\").length,\n          type: \"send\",\n          externalID: idInit,\n          comment: null, \n          state: null,\n        })\n    },\n handleDblClick(position) {\n    },\n    handleSelect(nodes) {\n      // console.log(nodes);\n    },\n    handleSelectConnection(connections) {\n      // console.log(connections);\n    },\n    async handleChartSave(nodes, connections) {},\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      if(connection.source.type ===\"action\"){\n        this.actionDialogVisible = true;\n      } else if(connection.source.type ===\"send\"){\n        this.sendDialogVisible = true;\n      } else if(connection.source.type ===\"receive\"){\n        this.receiveDialogVisible = true;\n      }\n    },\n  },\n  computed: {}, \n};\n</script>\n\n<style scoped>\n\n\n#toolbar {\n  margin-bottom: 12px;\n}\n\n.title {\n  margin-bottom: 0px;\n}\n\n\n#toolbar > button {\n  margin-right: 4px;\n  margin-left: 10px;\n}\n\n\n.container {\n  width: 100%;\n  margin: auto;\n}\n\n.tabs{\n  margin-left: 1px;\n\n}\n\n.el-button-group{\n  margin-left: 10px;\n\n}\n\n</style>\n"]}]}