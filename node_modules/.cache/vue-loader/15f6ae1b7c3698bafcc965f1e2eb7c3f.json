{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/SendDialog.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/components/Dialog/SendDialog.vue","mtime":1655369872563},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/css-loader/index.js","mtime":1655376985534},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655376986178},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/postcss-loader/src/index.js","mtime":1655376985873},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.SBD-select {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.text-label {\n  margin-left: 15px;\n  margin-right: 10px;\n}\n\n\n\n\n\n",{"version":3,"sources":["SendDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SendDialog.vue","sourceRoot":"src/components/Dialog","sourcesContent":["<template>\n    <div>\n      <md-dialog :md-click-outside-to-close=\"false\" :md-active.sync=\"visible\">\n      <md-dialog-title>Nachrichten</md-dialog-title>\n      <label class=\"text-label\">To</label>\n    <el-select  class=\"SBD-select\" @change=\"optionsToChange\"  v-model=\"connectionForm.sendTo\" no-data-text=\"Keine Subjekte vorhanden\"  placeholder=\"Select\" size=\"large\">\n    <el-option\n      v-for=\"item in optionsSendTo\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n    />\n  </el-select>\n  <label class=\"text-label\">Message</label>\n    <el-select class=\"SBD-select\" :disabled=\"connectionForm.sendTo === ''\" v-model=\"connectionForm.sendMsg\"  placeholder=\"Select\" no-data-text=\"Keine Nachrichten vorhanden\" size=\"large\">\n    <el-option\n      v-for=\"item in optionsSendMsg\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n    />\n  </el-select>\n<div class=\"md-layout md-alignment-center\">\n<div class=\"md-layout-item \">\n<md-button @click=\"handleClickCancelSaveConnection\">Abbrechen</md-button>\n</div>\n<div class=\"md-layout-item \">\n<md-button @click=\"handleClickSaveConnection\">Speichern</md-button>\n</div>\n  </div>\n  \n      </md-dialog>\n    </div>\n</template>\n<script>\n\n  export default {\n    props: {\n      idSBD: {\n      type: String,\n      },\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      connection: {\n        type: Object,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        inputVisible: false,\n        inputValue: '',\n        connectionForm: {\n          sourceId: null,\n          sourcePosition: null,\n          destinationId: null,\n          destinationPosition: null,\n          text: null,\n          messages: [],\n          sendTo: \"\",\n          sendMsg: \"\",\n        },\n      };\n    },\n    computed: {\n      optionsSendTo(){\n        var that = this \n      var sendToHelper = this.$store.state.connections.filter(element => element.source.id === this.idSBD).map(element => element.destination.id)\n      let uniqueSendTo = [...new Set(sendToHelper)]\n      return uniqueSendTo.map(element => Object.create({value: element, label: that.$store.state.nodes.find(elem => elem.id === element).text}))\n      },\n      optionsSendMsg(){\n      if(!this.connectionForm.sendTo){return}\n      var sendMsgHelper = this.$store.state.connections.filter(element => element.source.id === this.idSBD && element.destination.id === this.connectionForm.sendTo).map(element => element.messages).flat(1)\n      return sendMsgHelper.map(element => Object.create({value: element, label: element}))\n      },\n    },\n    methods: {\n      resetChangeSubject() {\n        if(!(this.optionsSendMsg.includes(this.connectionForm.sendMsg))){\n      this.connectionForm.sendMsg=\"\"\n        }}, \n          optionsToChange(){\n        this.connectionForm.sendMsg  = \"\"\n      },\n handleClose(tag) {\n        this.connectionForm.messages.splice(this.connectionForm.messages.indexOf(tag), 1);\n      },\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.connectionForm.messages.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      },\n      async handleClickSaveConnection() {\n        this.inputValue = '',\n        this.$emit('update:visible', false);\n        this.$emit('update:connection', Object.assign(this.connection, {\n          messages: [\"To: \" + this.connectionForm.sendTo, \"Msg: \" + this.connectionForm.sendMsg],\n          sendTo: this.connectionForm.sendTo,\n          sendMsg: this.connectionForm.sendMsg\n        }));\n      },\n\n  async handleClickCancelSaveConnection() {\n    this.$emit('update:visible', false);\n  },\n    },\n    watch: {\n      connection: {\n        immediate: true,\n        handler(val) {\n          console.log(val)\n          if (!val) { return; }\n          this.connectionForm.id = val.id;\n          this.connectionForm.messages = val.messages;\n          this.connectionForm.sendTo = val.sendTo;\n          this.connectionForm.sendMsg = val.sendMsg;\n        },\n      },\n    },\n  };\n</script>\n<style>\n\n.SBD-select {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.text-label {\n  margin-left: 15px;\n  margin-right: 10px;\n}\n\n\n\n\n\n</style>"]}]}