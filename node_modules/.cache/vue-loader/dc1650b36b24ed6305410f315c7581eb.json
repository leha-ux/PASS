{"remainingRequest":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SID.vue?vue&type=style&index=0&id=02b290f8&scoped=true&lang=css&","dependencies":[{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/src/views/SID.vue","mtime":1655049120576},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/css-loader/index.js","mtime":1655376985534},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655376986178},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/postcss-loader/src/index.js","mtime":1655376985873},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/cache-loader/dist/cjs.js","mtime":1655376985815},{"path":"/Users/leonhanschmann/Python_projects/PASS-web-app/PASS/node_modules/vue-loader/lib/index.js","mtime":1655376986005}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.import {\nposition: fixed;\n  top: 6%;\n  left: 94%;\n}\n\n.export {\nposition: fixed;\n  top: 6%;\n  left: 90%;\n}\n\n\n.toolbar {\nmargin-left: 12px;\nmargin-bottom: 12px;\n}\n  \n\n.title {\n  margin-bottom: 0px;\n}\n\n\n#toolbar > button {\n  margin-right: 4px;\n  margin-left: 10px;\n}\n\n\n.container {\n  width: 100%;\n}\n\n.tabs{\n  margin-left: 1px;\n\n}\n\n",{"version":3,"sources":["SID.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA","file":"SID.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"toolbar\">\n      <el-button\n      size=\"mini\"\n        @click=\"handleAddSubject\"\n      >\n        Füge Subjekt hinzu\n      </el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.remove()\">Lösche Subjekt/ Nachrichten</el-button>\n      <el-button size=\"mini\" @click=\"$refs.chart.editCurrent()\">\n        Bearbeite Subjekt/ Nachrichten\n      </el-button>\n      <el-button size=\"mini\" @click=\"test()\">\nTest</el-button>\n\n  <el-popconfirm\n  confirm-button-text='OK'\n  cancel-button-text='Abbrechen'\n  icon=\"el-icon-info\"\n  icon-color=\"red\"\n  title=\"Ein Import überschreibt das aktuell gespeicherte Modell. Wollen Sie trotzdem fortfahren?\"\n  @confirm=\"getFile()\"\n>\n<el-button slot=\"reference\" class=\"import\" size=\"mini\">Import</el-button>\n</el-popconfirm>\n      \n  <div style='height: 0px;width: 0px; overflow:hidden;'><input id=\"upfile\" type=\"file\" accept=\".json\" @change=\"processFile($event)\" /></div>\n    <el-button class=\"export\" size=\"mini\" @click=\"handleSave()\">Export</el-button>\n    </div>\n    <flowchart\n      :nodes=\"nodes\"\n      :connections=\"connections\"\n      @editnode=\"handleEditNode\"\n      :width=\"200000\"\n      :height=\"1000\"\n      :readonly=\"false\"\n      @dblclick=\"handleDblClick\"\n      @editconnection=\"handleEditConnection\"\n      @save=\"handleChartSave\"\n      @select=\"handleSelect\"\n      @selectconnection=\"handleSelectConnection\"\n      ref=\"chart\"\n    >\n    </flowchart>\n    <node-dialog\n      :visible.sync=\"nodeDialogVisible\"\n      :node.sync=\"nodeForm.target\"\n    ></node-dialog>\n    <connection-dialog\n      :visible.sync=\"connectionDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n    >\n    </connection-dialog>\n  </div>\n</template>\n<script>\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/Dialog/ConnectionDialog\";\nimport NodeDialog from \"../components/Dialog/NodeDialog\";\nimport Flowchart from \"../components/SIDflowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\nimport { mapFields } from 'vuex-map-fields';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  components: {\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      dialogVisible: false,\n      files: [],\n      connections: [],\n      nodes: [],\n      editableTabsValue: '2',\n        editableTabs: [{\n          title: 'Tab 1',\n          name: '1',\n          content: 'Tab 1 content'\n        }, {\n          title: 'Tab 2',\n          name: '2',\n          content: 'Tab 2 content'\n        }],\n        tabIndex: 2,\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false,\n    };\n  },\n  methods: {\n\ntest(){\n  alert(JSON.stringify(this.$store.state.nodes))\n    alert(JSON.stringify(this.$store.state.connections))\n\n},\n\n handleClose(done) {\n        this.$confirm('Are you sure to close this dialog?')\n          .then(_ => {\n            done();\n          })\n          .catch(_ => {});\n      },\ngetFile() {\n  document.getElementById(\"upfile\").click();\n},\nprocessFile(event) {\n\t// Stop the form from reloading the page\n\tevent.preventDefault();\n\t// Create a new FileReader() object\n\tlet reader = new FileReader();\n\t// Setup the callback event to run when the file is read\n\treader.onload = this.logFile;\n\t// Read the file\n\treader.readAsText(event.target.files[0])\n},\nlogFile (event) {\n\tlet str = event.target.result;\n\tlet json = JSON.parse(str);\n\tconsole.log('string', str);\n\tconsole.log('json', json);\n  this.$store.commit('set_all', json)\n},\nhandleSave(){\n  const data = {nodes : this.$store.state.nodes, connections : this.$store.state.connections}\n    console.log(data)\n    const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n      JSON.stringify(data)\n    )}`;\n    const link = document.createElement(\"a\");\n    link.href = jsonString;\n    link.download = \"PASS-Model-\" + Date.now()  + \".json\";\n\n    link.click();\n},\n\n\n\n    handleAddSubject(){\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Subjekt\" + this.$store.state.nodes.length,\n          type: \"intern\",\n          SBD: {nodes: [], connections : []},\n          externalID: idInit,\n          multiSubject: false,\n          comment: null,\n        })\n    },\n handleDblClick(position) {\n        let idInit = uuidv4()\n        this.$refs.chart.add({\n          id: idInit,\n          x: 10,\n          y: 10,\n          text: \"Subjekt\" + this.$store.state.nodes.length,\n          type: \"intern\",\n          SBD: {nodes: [], connections : []},\n          externalID: idInit,\n          multiSubject: false,\n          comment: null,\n        })\n    },\n    handleSelect(nodes) {\n      // console.log(nodes);\n    },\n    handleSelectConnection(connections) {\n      // console.log(connections);\n    },\n    async handleChartSave(nodes, connections) {\n      alert(JSON.stringify(this.$store.state.nodes))\n      alert(JSON.stringify(this.$store.state.connections))\n    },\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n  },\n    computed: {}, \n};\n</script>\n\n<style scoped>\n\n\n\n\n.import {\nposition: fixed;\n  top: 6%;\n  left: 94%;\n}\n\n.export {\nposition: fixed;\n  top: 6%;\n  left: 90%;\n}\n\n\n.toolbar {\nmargin-left: 12px;\nmargin-bottom: 12px;\n}\n  \n\n.title {\n  margin-bottom: 0px;\n}\n\n\n#toolbar > button {\n  margin-right: 4px;\n  margin-left: 10px;\n}\n\n\n.container {\n  width: 100%;\n}\n\n.tabs{\n  margin-left: 1px;\n\n}\n\n</style>\n"]}]}